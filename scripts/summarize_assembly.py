import argparse
import os
import pandas as pd
from Bio import SeqIO
from Bio.SeqUtils import gc_fraction


def generate_contigs_summary(contig_file: str, output: str) -> None:
    """Generate summary table from a fasta file containing assembled contigs
    """
    assert os.path.isfile(contig_file)
    # Append parsed data to dictionary.
    contig_data = {'id': [], 'length': [], 'gc_content': []}

    # Iterate over header lines and corresponding sequence in FASTA file.
    for seq_record in SeqIO.parse(contig_file, 'fasta'):
        contig_data['id'].append(seq_record.id)
        # Compute for length and GC content.
        contig_data['length'].append(len(seq_record))
        gc_content = round(gc_fraction(seq_record.seq), 3)
        contig_data['gc_content'].append(gc_content)

    # Store contig data into a dataframe
    contigs = pd.DataFrame(contig_data)
    # Sort by length and GC content
    sorted_contigs = contigs \
                        .sort_values(by=['length', 'gc_content'], ascending=True) \
                        .reset_index(drop=True)

    sorted_contigs.to_csv(output, index=False)


if __name__ == '__main__':
    # Setup parser for command-line arguments
    parser = argparse.ArgumentParser(
        prog='contigsSummary',
        description='Summarize attributes of contigs generated from an assembly')
    parser.add_argument('contigfile', type=str, help='a path pointing to the FASTA file generated by the assembler')
    parser.add_argument('-o', '--output', type=str, help='a path for saving the contig summary file', default='metadata/final.contigs.csv')
    # Extract argumetns
    args = parser.parse_args()

    try:
        generate_contigs_summary(args.contigfile, args.output)
    except FileNotFoundError as e:
        print(f'Error: {e}')
